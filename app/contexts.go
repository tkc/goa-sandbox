// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa sample": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/tkc/goa-sandbox/design
// --out=$(GOPATH)/src/github.com/tkc/goa-sandbox
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
	"strconv"
)

// CurrentUserAccountContext provides the account currentUser action context.
type CurrentUserAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Token *uuid.UUID
}

// NewCurrentUserAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller currentUser action.
func NewCurrentUserAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*CurrentUserAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CurrentUserAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramToken := req.Params["token"]
	if len(paramToken) > 0 {
		rawToken := paramToken[0]
		if token, err2 := uuid.FromString(rawToken); err2 == nil {
			tmp1 := &token
			rctx.Token = tmp1
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("token", rawToken, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CurrentUserAccountContext) OK(r *GoaExampleAccountCurrentuser) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.currentuser+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CurrentUserAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// LoginAccountContext provides the account login action context.
type LoginAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email    *string
	PassWord *string
}

// NewLoginAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller login action.
func NewLoginAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
	}
	paramPassWord := req.Params["passWord"]
	if len(paramPassWord) > 0 {
		rawPassWord := paramPassWord[0]
		rctx.PassWord = &rawPassWord
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginAccountContext) OK(r *GoaExampleAccountLogin) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.login+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// LogoutAccountContext provides the account logout action context.
type LogoutAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller logout action.
func NewLogoutAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LogoutAccountContext) OK(r *GoaExampleAccountLogout) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.logout+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LogoutAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// RegisterAccountContext provides the account register action context.
type RegisterAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Email    *string
	Name     *string
	PassWord *string
}

// NewRegisterAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller register action.
func NewRegisterAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegisterAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegisterAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEmail := req.Params["email"]
	if len(paramEmail) > 0 {
		rawEmail := paramEmail[0]
		rctx.Email = &rawEmail
	}
	paramName := req.Params["name"]
	if len(paramName) > 0 {
		rawName := paramName[0]
		rctx.Name = &rawName
	}
	paramPassWord := req.Params["passWord"]
	if len(paramPassWord) > 0 {
		rawPassWord := paramPassWord[0]
		rctx.PassWord = &rawPassWord
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterAccountContext) OK(r *GoaExampleAccountRegister) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.register+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegisterAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecureJWTContext provides the jwt secure action context.
type SecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Fail *bool
}

// NewSecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller secure action.
func NewSecureJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFail := req.Params["fail"]
	if len(paramFail) > 0 {
		rawFail := paramFail[0]
		if fail, err2 := strconv.ParseBool(rawFail); err2 == nil {
			tmp2 := &fail
			rctx.Fail = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fail", rawFail, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecureJWTContext) OK(r *GoaExampleAccountOK) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.ok+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecureJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// SigninJWTContext provides the jwt signin action context.
type SigninJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSigninJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signin action.
func NewSigninJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SigninJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SigninJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SigninJWTContext) OK(r *GoaExampleAccountRegister) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.register+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SigninJWTContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SigninJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// UnsecureJWTContext provides the jwt unsecure action context.
type UnsecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUnsecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller unsecure action.
func NewUnsecureJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*UnsecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UnsecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UnsecureJWTContext) OK(r *GoaExampleAccountOK) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account.ok+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UnsecureJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}
