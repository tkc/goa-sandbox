// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa sample": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/tkc/goa-sandbox/design
// --out=$(GOPATH)/src/github.com/tkc/goa-sandbox
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// CurrentUserAccountContext provides the account currentUser action context.
type CurrentUserAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCurrentUserAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller currentUser action.
func NewCurrentUserAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*CurrentUserAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CurrentUserAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CurrentUserAccountContext) OK(r *GoaExampleAccount) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *CurrentUserAccountContext) OKTiny(r *GoaExampleAccountTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CurrentUserAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// ListAccountContext provides the account list action context.
type ListAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Ids     []int
	Payload *AccountListPayload
}

// NewListAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller list action.
func NewListAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIds := req.Params["ids"]
	if len(paramIds) > 0 {
		params := make([]int, len(paramIds))
		for i, rawIds := range paramIds {
			if ids, err2 := strconv.Atoi(rawIds); err2 == nil {
				params[i] = ids
			} else {
				err = goa.MergeErrors(err, goa.InvalidParamTypeError("ids", rawIds, "integer"))
			}
		}
		rctx.Ids = params
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAccountContext) OK(r GoaExampleAccountCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json; type=collection")
	}
	if r == nil {
		r = GoaExampleAccountCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// LoginAccountContext provides the account login action context.
type LoginAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AccountPayload
}

// NewLoginAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller login action.
func NewLoginAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginAccountContext) OK(r *AccountPayload) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginAccountContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// SecureJWTContext provides the jwt secure action context.
type SecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Fail *bool
}

// NewSecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller secure action.
func NewSecureJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFail := req.Params["fail"]
	if len(paramFail) > 0 {
		rawFail := paramFail[0]
		if fail, err2 := strconv.ParseBool(rawFail); err2 == nil {
			tmp2 := &fail
			rctx.Fail = tmp2
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("fail", rawFail, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SecureJWTContext) OK(r *GoaExampleAccount) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *SecureJWTContext) OKTiny(r *GoaExampleAccountTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SecureJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// SignInJWTContext provides the jwt signIn action context.
type SignInJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewSignInJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller signIn action.
func NewSignInJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*SignInJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SignInJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SignInJWTContext) OK(r *GoaExampleAccount) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *SignInJWTContext) OKTiny(r *GoaExampleAccountTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *SignInJWTContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SignInJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// UnsecureJWTContext provides the jwt unsecure action context.
type UnsecureJWTContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUnsecureJWTContext parses the incoming request URL and body, performs validations and creates the
// context used by the jwt controller unsecure action.
func NewUnsecureJWTContext(ctx context.Context, r *http.Request, service *goa.Service) (*UnsecureJWTContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UnsecureJWTContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UnsecureJWTContext) OK(r *GoaExampleAccount) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// OKTiny sends a HTTP response with status code 200.
func (ctx *UnsecureJWTContext) OKTiny(r *GoaExampleAccountTiny) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.example.account+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UnsecureJWTContext) Unauthorized(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}
