// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa sample": account Resource Client
//
// Command:
// $ goagen
// --design=github.com/tkc/goa-sandbox/design
// --out=$(GOPATH)/src/github.com/tkc/goa-sandbox
// --version=v1.3.1

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CurrentUserAccountPath computes a request path to the currentUser action of account.
func CurrentUserAccountPath() string {

	return fmt.Sprintf("/current_user")
}

// CurrentUserAccount makes a request to the currentUser action endpoint of the account resource
func (c *Client) CurrentUserAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCurrentUserAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCurrentUserAccountRequest create the request corresponding to the currentUser action endpoint of the account resource.
func (c *Client) NewCurrentUserAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListAccountPath computes a request path to the list action of account.
func ListAccountPath() string {

	return fmt.Sprintf("/list")
}

// ListAccount makes a request to the list action endpoint of the account resource
func (c *Client) ListAccount(ctx context.Context, path string, payload *AccountListPayload, ids []int, contentType string) (*http.Response, error) {
	req, err := c.NewListAccountRequest(ctx, path, payload, ids, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAccountRequest create the request corresponding to the list action endpoint of the account resource.
func (c *Client) NewListAccountRequest(ctx context.Context, path string, payload *AccountListPayload, ids []int, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	for _, p := range ids {
		tmp8 := strconv.Itoa(p)
		values.Add("ids", tmp8)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// LoginAccountPath computes a request path to the login action of account.
func LoginAccountPath() string {

	return fmt.Sprintf("/login")
}

// LoginAccount makes a request to the login action endpoint of the account resource
func (c *Client) LoginAccount(ctx context.Context, path string, payload *AccountPayload, contentType string) (*http.Response, error) {
	req, err := c.NewLoginAccountRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginAccountRequest create the request corresponding to the login action endpoint of the account resource.
func (c *Client) NewLoginAccountRequest(ctx context.Context, path string, payload *AccountPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
