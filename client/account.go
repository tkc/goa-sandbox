// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "goa sample": account Resource Client
//
// Command:
// $ goagen
// --design=github.com/tkc/goa-sandbox/design
// --out=$(GOPATH)/src/github.com/tkc/goa-sandbox
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CurrentUserAccountPath computes a request path to the currentUser action of account.
func CurrentUserAccountPath() string {

	return fmt.Sprintf("/api/v1/currentuser")
}

// CurrentUserAccount makes a request to the currentUser action endpoint of the account resource
func (c *Client) CurrentUserAccount(ctx context.Context, path string, token *uuid.UUID) (*http.Response, error) {
	req, err := c.NewCurrentUserAccountRequest(ctx, path, token)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCurrentUserAccountRequest create the request corresponding to the currentUser action endpoint of the account resource.
func (c *Client) NewCurrentUserAccountRequest(ctx context.Context, path string, token *uuid.UUID) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if token != nil {
		tmp10 := token.String()
		values.Set("token", tmp10)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LoginAccountPath computes a request path to the login action of account.
func LoginAccountPath() string {

	return fmt.Sprintf("/api/v1/login")
}

// LoginAccount makes a request to the login action endpoint of the account resource
func (c *Client) LoginAccount(ctx context.Context, path string, email *string, passWord *string) (*http.Response, error) {
	req, err := c.NewLoginAccountRequest(ctx, path, email, passWord)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLoginAccountRequest create the request corresponding to the login action endpoint of the account resource.
func (c *Client) NewLoginAccountRequest(ctx context.Context, path string, email *string, passWord *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if email != nil {
		values.Set("email", *email)
	}
	if passWord != nil {
		values.Set("passWord", *passWord)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// LogoutAccountPath computes a request path to the logout action of account.
func LogoutAccountPath() string {

	return fmt.Sprintf("/api/v1/logout")
}

// LogoutAccount makes a request to the logout action endpoint of the account resource
func (c *Client) LogoutAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewLogoutAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewLogoutAccountRequest create the request corresponding to the logout action endpoint of the account resource.
func (c *Client) NewLogoutAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RegisterAccountPath computes a request path to the register action of account.
func RegisterAccountPath() string {

	return fmt.Sprintf("/api/v1/register")
}

// RegisterAccount makes a request to the register action endpoint of the account resource
func (c *Client) RegisterAccount(ctx context.Context, path string, email *string, name *string, passWord *string) (*http.Response, error) {
	req, err := c.NewRegisterAccountRequest(ctx, path, email, name, passWord)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRegisterAccountRequest create the request corresponding to the register action endpoint of the account resource.
func (c *Client) NewRegisterAccountRequest(ctx context.Context, path string, email *string, name *string, passWord *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if email != nil {
		values.Set("email", *email)
	}
	if name != nil {
		values.Set("name", *name)
	}
	if passWord != nil {
		values.Set("passWord", *passWord)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
